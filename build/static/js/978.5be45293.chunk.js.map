{"version":3,"file":"static/js/978.5be45293.chunk.js","mappings":"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","sources":["webpack://react-burger/./src/components/auth/auth-actions/auth-actions.module.css?4a96","components/auth/auth-actions/auth-actions.tsx","webpack://react-burger/./src/components/auth/auth-form/auth-form.module.css?b098","components/auth/auth-form/auth-form.tsx","components/button/button.tsx","components/button/types.ts","pages/register-page/register-page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authActions\":\"auth-actions_authActions__G+3LS\",\"authAction\":\"auth-actions_authAction__6e1pB\",\"resetPadding\":\"auth-actions_resetPadding__lgxBR\"};","import { FC } from 'react'\n\nimport { Button } from '@/components/button/button'\nimport {\n  HtmlTypeButton,\n  SizeButton,\n  TypeButton,\n} from '@/components/button/types'\n\nimport styles from './auth-actions.module.css'\n\ntype AuthAction = {\n  text: string\n  action: {\n    text: string\n    onClick: () => void\n  }\n}\n\ninterface AuthActionsProps {\n  actions: AuthAction[]\n}\n\nconst AuthActions: FC<AuthActionsProps> = ({ actions }) => (\n  <section className={styles.authActions}>\n    {actions.map(({ text, action }, index) => (\n      <span className={styles.authAction} key={index}>\n        <p className=\"text text_type_main-default text_color_inactive\">\n          {text}\n        </p>\n\n        <Button\n          htmlType={HtmlTypeButton.BUTTON}\n          type={TypeButton.SECONDARY}\n          size={SizeButton.MEDIUM}\n          extraClass={styles.resetPadding}\n          onClick={action.onClick}\n        >\n          {action.text}\n        </Button>\n      </span>\n    ))}\n  </section>\n)\n\nexport default AuthActions\n","// extracted by mini-css-extract-plugin\nexport default {\"authForm\":\"auth-form_authForm__gq-Cw\",\"actions\":\"auth-form_actions__Zsucr\"};","import { FC, FormEvent, ReactNode } from 'react'\n\nimport classNames from 'classnames'\n\nimport { Button } from '@/components/button/button'\nimport { HtmlTypeButton, TypeButton } from '@/components/button/types'\n\nimport styles from './auth-form.module.css'\n\ninterface AuthFormProps {\n  children: ReactNode\n  title?: string\n  onSubmit: () => void\n  onCancel?: () => void\n  submitText?: string\n  cancelText?: string\n  displayActions?: boolean\n  isLoading?: boolean\n}\n\nconst AuthForm: FC<AuthFormProps> = ({\n  children,\n  title,\n  onSubmit,\n  submitText,\n  onCancel,\n  cancelText,\n  displayActions = true,\n  isLoading = false,\n}) => {\n  const handleSubmit = (e: FormEvent): void => {\n    e.preventDefault()\n\n    onSubmit()\n  }\n\n  const handleCancel = (): void => {\n    onCancel && onCancel()\n  }\n\n  return (\n    <form\n      className={classNames(styles.authForm, 'mb-20')}\n      onSubmit={handleSubmit}\n      method=\"POST\"\n      noValidate\n    >\n      {title && <p className=\"text text_type_main-medium mb-6\">{title}</p>}\n      {children}\n\n      {displayActions && (\n        <div className={styles.actions}>\n          {cancelText && (\n            <Button\n              htmlType={HtmlTypeButton.BUTTON}\n              type={TypeButton.SECONDARY}\n              onClick={handleCancel}\n            >\n              {cancelText}\n            </Button>\n          )}\n\n          <Button htmlType={HtmlTypeButton.SUBMIT} disabled={isLoading}>\n            {submitText}\n          </Button>\n        </div>\n      )}\n    </form>\n  )\n}\n\nexport default AuthForm\n","import React, { FC, HTMLProps, ReactNode } from 'react'\n\nimport {\n  HtmlTypeButton,\n  SizeButton,\n  TypeButton,\n} from '@/components/button/types'\n\nimport { Button as YaButton } from '@ya.praktikum/react-developer-burger-ui-components'\n\ninterface ButtonProps\n  extends Omit<HTMLProps<HTMLButtonElement>, 'type' | 'size'> {\n  children: ReactNode\n  type?: TypeButton\n  htmlType?: HtmlTypeButton\n  size?: SizeButton\n  extraClass?: string\n  onClick?: () => void\n}\n\nexport const Button: FC<ButtonProps> = props => {\n  const {\n    children,\n    htmlType = HtmlTypeButton.BUTTON,\n    type = TypeButton.PRIMARY,\n    size = SizeButton.MEDIUM,\n    extraClass,\n    onClick,\n    ...otherProps\n  } = props\n\n  return (\n    <YaButton\n      htmlType={htmlType}\n      type={type}\n      size={size}\n      extraClass={extraClass}\n      onClick={onClick}\n      {...otherProps}\n    >\n      {children}\n    </YaButton>\n  )\n}\n","export enum TypeButton {\n  SECONDARY = 'secondary',\n  PRIMARY = 'primary',\n}\n\nexport enum HtmlTypeButton {\n  BUTTON = 'button',\n  SUBMIT = 'submit',\n  RESET = 'reset',\n}\n\nexport enum SizeButton {\n  SMALL = 'small',\n  MEDIUM = 'medium',\n  LARGE = 'large',\n}\n","import { FC, Fragment, useState } from 'react'\n\nimport { useNavigate } from 'react-router-dom'\n\nimport { useAppDispatch, useAppSelector } from '@/components/app/store/store'\nimport AuthActions from '@/components/auth/auth-actions/auth-actions'\nimport AuthForm from '@/components/auth/auth-form/auth-form'\n\nimport { register } from '@/services/auth/register'\nimport {\n  getAuthError,\n  getAuthLoading,\n  getIsAuthenticated,\n} from '@/services/auth/selectors'\n\nimport { loginPath } from '@/utils/route-paths'\n\nimport {\n  EmailInput,\n  Input,\n  PasswordInput,\n} from '@ya.praktikum/react-developer-burger-ui-components'\n\nconst RegisterPage: FC = () => {\n  const navigate = useNavigate()\n  const dispatch = useAppDispatch()\n  const isLoading = useAppSelector(getAuthLoading)\n  const isError = useAppSelector(getAuthError)\n  const isAuthenticated = useAppSelector(getIsAuthenticated)\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [name, setName] = useState('')\n\n  const clearForm = (): void => {\n    if (isAuthenticated) {\n      setEmail('')\n      setPassword('')\n      setName('')\n    }\n  }\n\n  const onSubmit = (): void => {\n    dispatch(register({ email, name, password }))\n    clearForm()\n  }\n\n  const toLoginPage = (): void => {\n    navigate(loginPath)\n  }\n\n  return (\n    <Fragment>\n      <AuthForm\n        title=\"Регистрация\"\n        onSubmit={onSubmit}\n        submitText=\"Зарегистрироваться\"\n        isLoading={isLoading}\n      >\n        {isError && <p className=\"text text_type_main-medium\">{isError}</p>}\n        {/* @ts-expect-error: onPointerEnterCapture, onPointerLeaveCapture warnings otherwise */}\n        <Input\n          onChange={e => setName(e.target.value)}\n          type=\"text\"\n          value={name}\n          placeholder=\"Имя\"\n          name=\"username\"\n          extraClass=\"mb-6\"\n        />\n\n        <EmailInput\n          onChange={e => setEmail(e.target.value)}\n          value={email}\n          name=\"email\"\n          isIcon={false}\n          extraClass=\"mb-6\"\n        />\n\n        <PasswordInput\n          onChange={e => setPassword(e.target.value)}\n          value={password}\n          name=\"password\"\n          extraClass=\"mb-6\"\n        />\n      </AuthForm>\n\n      <AuthActions\n        actions={[\n          {\n            text: 'Вспомнили пароль?',\n            action: {\n              text: 'Войти',\n              onClick: toLoginPage,\n            },\n          },\n        ]}\n      />\n    </Fragment>\n  )\n}\n\nexport default RegisterPage\n"],"names":["_ref","actions","_jsx","className","styles","children","map","_ref2","index","text","action","_jsxs","Button","htmlType","HtmlTypeButton","BUTTON","type","TypeButton","SECONDARY","size","SizeButton","MEDIUM","extraClass","onClick","title","onSubmit","submitText","onCancel","cancelText","displayActions","isLoading","classNames","e","preventDefault","method","noValidate","handleCancel","SUBMIT","disabled","props","PRIMARY","otherProps","YaButton","RegisterPage","navigate","useNavigate","dispatch","useAppDispatch","useAppSelector","getAuthLoading","isError","getAuthError","isAuthenticated","getIsAuthenticated","email","setEmail","useState","password","setPassword","name","setName","Fragment","AuthForm","register","Input","onChange","target","value","placeholder","EmailInput","isIcon","PasswordInput","AuthActions","toLoginPage","loginPath"],"sourceRoot":""}