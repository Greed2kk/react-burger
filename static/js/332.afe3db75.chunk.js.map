{"version":3,"file":"static/js/332.afe3db75.chunk.js","mappings":"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","sources":["webpack://react-burger/./src/components/auth/auth-form/auth-form.module.css?b098","components/auth/auth-form/auth-form.tsx","components/button/button.tsx","components/button/types.ts","pages/profile-page/profile-form/profile-form.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authForm\":\"auth-form_authForm__gq-Cw\",\"actions\":\"auth-form_actions__Zsucr\"};","import { FC, FormEvent, ReactNode } from 'react'\n\nimport classNames from 'classnames'\n\nimport { Button } from '@/components/button/button'\nimport { HtmlTypeButton, TypeButton } from '@/components/button/types'\n\nimport styles from './auth-form.module.css'\n\ninterface AuthFormProps {\n  children: ReactNode\n  title?: string\n  onSubmit: () => void\n  onCancel?: () => void\n  submitText?: string\n  cancelText?: string\n  displayActions?: boolean\n  isLoading?: boolean\n}\n\nconst AuthForm: FC<AuthFormProps> = ({\n  children,\n  title,\n  onSubmit,\n  submitText,\n  onCancel,\n  cancelText,\n  displayActions = true,\n  isLoading = false,\n}) => {\n  const handleSubmit = (e: FormEvent): void => {\n    e.preventDefault()\n\n    onSubmit()\n  }\n\n  const handleCancel = (): void => {\n    onCancel && onCancel()\n  }\n\n  return (\n    <form\n      className={classNames(styles.authForm, 'mb-20')}\n      onSubmit={handleSubmit}\n      method=\"POST\"\n      noValidate\n    >\n      {title && <p className=\"text text_type_main-medium mb-6\">{title}</p>}\n      {children}\n\n      {displayActions && (\n        <div className={styles.actions}>\n          {cancelText && (\n            <Button\n              htmlType={HtmlTypeButton.BUTTON}\n              type={TypeButton.SECONDARY}\n              onClick={handleCancel}\n            >\n              {cancelText}\n            </Button>\n          )}\n\n          <Button htmlType={HtmlTypeButton.SUBMIT} disabled={isLoading}>\n            {submitText}\n          </Button>\n        </div>\n      )}\n    </form>\n  )\n}\n\nexport default AuthForm\n","import React, { FC, HTMLProps, ReactNode } from 'react'\n\nimport {\n  HtmlTypeButton,\n  SizeButton,\n  TypeButton,\n} from '@/components/button/types'\n\nimport { Button as YaButton } from '@ya.praktikum/react-developer-burger-ui-components'\n\ninterface ButtonProps\n  extends Omit<HTMLProps<HTMLButtonElement>, 'type' | 'size'> {\n  children: ReactNode\n  type?: TypeButton\n  htmlType?: HtmlTypeButton\n  size?: SizeButton\n  extraClass?: string\n  onClick?: () => void\n}\n\nexport const Button: FC<ButtonProps> = props => {\n  const {\n    children,\n    htmlType = HtmlTypeButton.BUTTON,\n    type = TypeButton.PRIMARY,\n    size = SizeButton.MEDIUM,\n    extraClass,\n    onClick,\n    ...otherProps\n  } = props\n\n  return (\n    <YaButton\n      htmlType={htmlType}\n      type={type}\n      size={size}\n      extraClass={extraClass}\n      onClick={onClick}\n      {...otherProps}\n    >\n      {children}\n    </YaButton>\n  )\n}\n","export enum TypeButton {\n  SECONDARY = 'secondary',\n  PRIMARY = 'primary',\n}\n\nexport enum HtmlTypeButton {\n  BUTTON = 'button',\n  SUBMIT = 'submit',\n  RESET = 'reset',\n}\n\nexport enum SizeButton {\n  SMALL = 'small',\n  MEDIUM = 'medium',\n  LARGE = 'large',\n}\n","import { ChangeEvent, FC, Fragment, useEffect, useState } from 'react'\n\nimport { useAppDispatch, useAppSelector } from '@/components/app/store/store'\nimport AuthForm from '@/components/auth/auth-form/auth-form'\n\nimport {\n  resetFormData,\n  setUserEmail,\n  setUserName,\n  setUserPassword,\n} from '@/services/auth/auth-slice'\nimport {\n  getAuthLoading,\n  getAuthUserForm,\n  getChangedData,\n  getFormIsChanged,\n} from '@/services/auth/selectors'\nimport { user } from '@/services/auth/user'\nimport { userUpdate } from '@/services/auth/user-update'\n\nimport {\n  Input,\n  PasswordInput,\n} from '@ya.praktikum/react-developer-burger-ui-components'\n\nconst ProfileForm: FC = () => {\n  const dispatch = useAppDispatch()\n  const data = useAppSelector(getAuthUserForm)\n  const [disableName, setDisableName] = useState(true)\n  const [disableEmail, setDisableEmail] = useState(true)\n  const isLoading = useAppSelector(getAuthLoading)\n  const [password, setPassword] = useState('123456')\n\n  const changedData = useAppSelector(getChangedData)\n\n  const formIsChanged = useAppSelector(getFormIsChanged)\n\n  const handleUserNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setUserName({ name: e.target.value }))\n  }\n\n  const handleEmailChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setUserEmail({ email: e.target.value }))\n  }\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setPassword(e.target.value)\n    dispatch(setUserPassword({ password: e.target.value }))\n  }\n\n  useEffect(() => {\n    dispatch(user())\n  }, [dispatch])\n\n  const onSubmit = (): void => {\n    setDisableName(true)\n    setDisableEmail(true)\n\n    dispatch(userUpdate(changedData))\n  }\n\n  const onCancel = (): void => {\n    dispatch(resetFormData())\n    setDisableName(true)\n    setDisableEmail(true)\n  }\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <h1 style={{ gridArea: 'right' }}>Загрузка...</h1>\n      ) : (\n        <AuthForm\n          onSubmit={onSubmit}\n          submitText=\"Сохранить\"\n          onCancel={onCancel}\n          cancelText=\"Отмена\"\n          displayActions={formIsChanged}\n        >\n          {/* @ts-expect-error: onPointerEnterCapture, onPointerLeaveCapture warnings otherwise */}\n          <Input\n            type=\"text\"\n            placeholder=\"Имя\"\n            onChange={handleUserNameChange}\n            value={data?.name || ''}\n            name=\"name\"\n            size=\"default\"\n            extraClass=\"mb-6\"\n            icon={disableName ? 'EditIcon' : 'CloseIcon'}\n            onIconClick={() => setDisableName(!disableName)}\n            disabled={disableName}\n          />\n\n          {/* @ts-expect-error: onPointerEnterCapture, onPointerLeaveCapture warnings otherwise */}\n\n          <Input\n            type=\"text\"\n            placeholder=\"Логин\"\n            name=\"email\"\n            size=\"default\"\n            onChange={handleEmailChange}\n            value={data?.email || ''}\n            icon={disableEmail ? 'EditIcon' : 'CloseIcon'}\n            onIconClick={() => setDisableEmail(!disableEmail)}\n            extraClass=\"mb-6\"\n            disabled={disableEmail}\n          />\n\n          <PasswordInput\n            onChange={handlePasswordChange}\n            value={password}\n            name=\"password\"\n            extraClass=\"mb-6\"\n            icon=\"EditIcon\"\n          />\n        </AuthForm>\n      )}\n\n      <p className=\"text text_type_main-default text_color_inactive\">\n        В этом разделе вы можете изменить свои персональные данные\n      </p>\n    </Fragment>\n  )\n}\n\nexport default ProfileForm\n"],"names":["_ref","children","title","onSubmit","submitText","onCancel","cancelText","displayActions","isLoading","_jsxs","className","classNames","styles","e","preventDefault","method","noValidate","_jsx","Button","htmlType","HtmlTypeButton","BUTTON","type","TypeButton","SECONDARY","onClick","handleCancel","SUBMIT","disabled","props","PRIMARY","size","SizeButton","MEDIUM","extraClass","otherProps","YaButton","ProfileForm","dispatch","useAppDispatch","data","useAppSelector","getAuthUserForm","disableName","setDisableName","useState","disableEmail","setDisableEmail","getAuthLoading","password","setPassword","changedData","getChangedData","formIsChanged","getFormIsChanged","useEffect","user","Fragment","style","gridArea","AuthForm","userUpdate","resetFormData","Input","placeholder","onChange","setUserName","name","target","value","icon","onIconClick","setUserEmail","email","PasswordInput","setUserPassword"],"sourceRoot":""}